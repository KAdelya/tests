package com.example.demo.Tests;
// Generated by Selenium IDE

import com.example.demo.ApplicationManager;
import com.example.demo.generators.Generator;
import com.example.demo.helpers.AuthBase;
import com.example.demo.models.AccountData;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;

import com.example.demo.models.NoteData;
import com.example.demo.models.jaxb.Notes;
import org.junit.Assert;
import org.junit.Test;
import org.junit.experimental.theories.DataPoints;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.runner.RunWith;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.File;
import java.util.List;

@RunWith(Theories.class)
public class Test00042 extends AuthBase {
    private static Notes NULL;
//    AccountData user = new AccountData("adelya6387240@gmail.com", "pokdfghQ1");

    //    NoteData note = new NoteData("hello");
//    NoteData changeNote = new NoteData("hello000000");
    @DataPoints
    public static List<NoteData> notesFromXmlFile1() {
        try {
            JAXBContext context = JAXBContext.newInstance(Notes.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            Notes notesChange = (Notes) unmarshaller.unmarshal(new File(Generator.DIRECTORY + "/output_2_for_change_data.xml"));
            Notes notes1 = (Notes) unmarshaller.unmarshal(new File(Generator.DIRECTORY + "/output.xml"));
            if (notesChange != NULL) {
                return notesChange.getNotes();
            }
            return notes1.getNotes();
        } catch (JAXBException exception) {
            throw new RuntimeException(exception);
        }

    }

    @Test
    @Theory
    public void test4(NoteData notes1, NoteData notesChange) throws InterruptedException {
//        app.getNavigation().getSiteUrl();
//        app.getAuth().Login(user);
        ApplicationManager.getNote().changeNote(notesChange);
        Assert.assertNotEquals(notes1.getRecord(), ApplicationManager.getNote().getLastNote());
    }
}

package com.example.demo.helpers;
// Generated by Selenium IDE

import com.example.demo.models.AccountData;
import com.example.demo.ApplicationManager;

import org.openqa.selenium.*;

import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

public class LoginHelper extends HelperBase {
    public LoginHelper(ApplicationManager manager) {
        driver = manager.getDriver();
    }

    public void submitForm() {
        driver.findElement(By.cssSelector(".button_idle")).click();
    }

    public void fillPasswordField(String password) {
//        driver.findElement(By.name("input:nth-child(3)")).sendKeys(Keys.CONTROL + "a");
//        driver.findElement(By.name("input:nth-child(3)")).sendKeys(Keys.DELETE);
        driver.findElement(By.cssSelector("input:nth-child(3)")).sendKeys(password);
    }

    public void clickToPasswordField() {
        driver.findElement(By.cssSelector("input:nth-child(3)")).click();
    }

    private void waitASecond() {
        driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);
    }

    public void fillEmailField(String email) throws InterruptedException {
//        driver.findElement(By.name("email")).sendKeys(Keys.DELETE);
//        driver.findElement(By.name("email")).sendKeys(Keys.CONTROL + "a");
//        driver.findElement(By.name("email")).sendKeys(Keys.DELETE);
//        TimeUnit.SECONDS.sleep(1);
        driver.findElement(By.name("email")).sendKeys(email);
    }

    public void clickToEmailField() {
//        driver.findElement(By.name("email")).click();
        driver.findElement(By.name("email")).click();
    }
//    public boolean isAuthorized() {
//        return isElementPresent(By.xpath("//li[@id='l_pr']/a"));
//    }

    public void delayTime() throws InterruptedException {
        TimeUnit.SECONDS.sleep(5);
    }

    public void findUsernameElement() {
        driver.findElement(By.xpath("//p[contains(@class, 'leftbar-userIcon')]/span"));
    }

    public boolean findUsername() throws InterruptedException {
//        TimeUnit.SECONDS.sleep(5);
        return isElementPresent(By.xpath("//p[contains(@class, 'leftbar-userIcon')]/span"));
    }

    public boolean getCurrentUsername(String username) throws InterruptedException {
        driver.findElement(By.className("mainButton")).click();
//        driver.findElement(By.cssSelector(".leftbar-screenCover")).click();
        TimeUnit.SECONDS.sleep(5);
        String user = driver.findElement(By.xpath(".//div/div/div/div/p/span")).getText();
        System.out.println(user);
        driver.findElement(By.cssSelector(".leftbar-screenCover")).click();
        return Objects.equals(user, username);
    }

//    public boolean isAuthorized(AccountData user) {
//        try {
//            return getCurrentUsername(user.username);
//        } catch (NoSuchElementException | InterruptedException exception) {
//            return false;
//        }
//    }

    public void logout() throws InterruptedException {
        driver.findElement(By.cssSelector(".mainButton")).click();
        driver.findElement(By.linkText("Выйти")).click();
        TimeUnit.SECONDS.sleep(5);
    }

    public boolean isNotAuthorized() {
        try {
            WebElement webElement = driver.findElement(By.xpath(
                    "//*[@id='root']/div/div/div/div/div/div/div/div/form/div[1]/div[3]/div[1]/div/div[2]"
            ));
            return Objects.equals(webElement.getText(), "Неверный пароль");
        } catch (NoSuchElementException exception) {
            return false;
        }
    }

    public void Login(AccountData user) throws InterruptedException {
//        if (findUsername()) {
//            delayTime();
//            System.out.println(getCurrentUsername(user.username));
//            if (getCurrentUsername(user.username)) {
//                System.out.println(getCurrentUsername(user.username));
//                return;
//            }
//            else {
//                logout();
//            }
//        }
//        else {
//            driver.get("http://web.bossnote.ru/signIn/");
//            driver.manage().window().setSize(new Dimension(1100, 900));
            delayTime();
            clickToEmailField();
            fillEmailField(user.username);
            clickToPasswordField();
            fillPasswordField(user.password);
            submitForm();
            waitASecond();
//        }
//        TimeUnit.SECONDS.sleep(5);
//        System.out.println(findUsername());
//        System.out.println(getCurrentUsername(user.username));
//        clickToEmailField();
//        fillEmailField(user.username);
//        clickToPasswordField();
//        fillPasswordField(user.password);
//        submitForm();
//        waitASecond();
    }

//    public void deleteUsername() {
//        clickToEmailField();
//        driver.findElement(By.cssSelector(".siShapes")).click();
//    }

    public boolean hasLoaded() {
        waitASecond();
        try {
            waitASecond();
            delayTime();
            waitASecond();
            findUsernameElement();
            waitASecond();
        } catch (StaleElementReferenceException | InterruptedException e) {
            waitASecond();
            return false;
        }

        return true;

    }

    public static String getRandomUsername(int minWord, int maxWord, int minLength, int maxLength) {
        String alphabet = "qwertyuiopasdfghjklzxcvbn0123456789@.";
        alphabet = alphabet + alphabet.toUpperCase();
        char[] chars = alphabet.toCharArray();
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < Math.round(Math.random() * (maxWord - minWord)) + minWord; i++) {
            for (int j = 0; j < Math.round(Math.random() * (maxLength - minLength)) + minLength; j++) {
                stringBuilder.append(chars[(int) Math.round(Math.random() * (chars.length - 1))]);
            }
            stringBuilder.append(" ");
        }
        return stringBuilder.toString().trim();
    }

    public static String getRandomPassword(int minWord, int maxWord, int minLength, int maxLength) {
        String alphabet = "qwertyuiopasdfghjklzxcvbn0123456789";
        alphabet = alphabet + alphabet.toUpperCase();
        char[] chars = alphabet.toCharArray();
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < Math.round(Math.random() * (maxWord - minWord)) + minWord; i++) {
            for (int j = 0; j < Math.round(Math.random() * (maxLength - minLength)) + minLength; j++) {
                stringBuilder.append(chars[(int) Math.round(Math.random() * (chars.length - 1))]);
            }
            stringBuilder.append(" ");
        }
        return stringBuilder.toString().trim();
    }

}
